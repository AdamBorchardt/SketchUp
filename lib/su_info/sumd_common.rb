# Common methods for SUMD modules
#
# Since this loads for all SUMD modules, variable & method names are chosen to
# allow them to be removed from the SketchUp symbol list.
#
module SUMD
  @version = 2.0.to_f

  @rb_dir = File.dirname(__FILE__)

  @path_md   = '../../docs/'
  @path_txt  = '../../su_info_txt'
  @path_temp = ENV['TMP'] || ENV['TEMP']

  # used in file names, which are also shown in the 'finished' messagebox
  @su_major = Sketchup.version.split('.')[0].rjust(2, '0')
  if ( @su_major.to_i >= 10 )
    @toc_su = "20#{@su_major}"
    @title_su = @toc_su
  else
    @toc_su = @su_major.to_i.to_s
    @title_su = @toc_su.to_s.rjust(4, '_')
  end

  # Returns file contents
  # @param n [String] file name with extension
  # @return  [String, nil]
  #
  def SUMD.sumd_file_read(n)
    @ret = nil
    if (n.slice(-3,3) == '.md')
      d = File.expand_path(@path_md, @rb_dir)  || @path_temp
    elsif (n.slice(-4,4) == '.txt')
      d = File.expand_path(@path_txt, @rb_dir) || @path_temp
    elsif (n.slice(-3,3) == '.rb')
      d = @rb_dir
    end
    if File.directory?(d)
      @full_name = "#{d}#{File::SEPARATOR}#{n}"
      if File.exists?(@full_name)
        @ret = File.read(@full_name)
      else
        UI.messagebox("File #{@full_name} does not exist\n\nExiting!")
      end
    else
      UI.messagebox("Directory #{d} does not exist\n\nExiting!")
    end
    @ret
  end

  # Writes output file, returns full file name if successful
  # @param sumd_name [String] file name suffix
  # @param s         [String] file contents
  # @return [String, nil] full file name
  #
  def SUMD.sumd_file_write(sumd_name, s)
    filename = nil
    if (sumd_name.slice(-4,4) == '.txt')
      d = File.expand_path(@path_txt, @rb_dir) || @path_temp
      n = "su#{@su_major}_#{sumd_name}"
    elsif (sumd_name.slice(-3,3) == '.md')
      d = File.expand_path(@path_md, @rb_dir)  || @path_temp
      n = "SketchUp_#{@su_major}_#{sumd_name.gsub(/ /,'_')}"
      str = sumd_name.sub(/\.md/, '')
#     tt = "#{@title_su} #{str}".gsub(/_/, '&#8196;&#8197;' )
      tt = "#{@title_su} #{str}".gsub(/ /, "&nbsp;" )
      s.sub!( /^# @title Template.*/, "# @title #{tt}" )
      s.sub!( /TOC #{str}/, "SketchUp #{@toc_su} #{str}" )
      
    else
      UI.messagebox('Unknown extension!')
      return nil
    end
    if (File.directory?(d))
      filename = "#{d}#{File::SEPARATOR}#{n}"
      f = File.open(filename, "w")
      if (f)
        f.write(s)
        f.close
      end
    else
      UI.messagebox("Directory #{d} does not exist!")
    end
    filename
  end

  # Returns 'Generated by...' string for md files
  # @param n [String] module name
  # @param v [Float]  version
  #
  def SUMD.sumd_generated_by(n, v)
    # create file hdr
    t = Time.now.gmtime
    date =  t.strftime("%Y-%m-%d at %I:%M:%S %p") + " GMT"
    "Generated with [#{n}] v#{v.to_s}, on #{date},\n" \
    "using SketchUp v#{Sketchup.version} & Ruby v#{RUBY_VERSION}."
  end
  
  # Loads a hash with either native Ruby constants or symbols
  # @param hash [Hash] loaded with file contents
  # @param sym  [Boolean, nil] true if symbols, nil for constants
  # @return [Boolean] true if hash loaded
  #
  def SUMD.sumd_get_ruby_hash(hash, sym = nil)
    @ret = false
    d = File.expand_path(@path_txt, @rb_dir) || @path_temp
    if File.directory?(d)
      if sym
        @f_name = "#{d}#{File::SEPARATOR}native_ruby_syms.txt"
      else
        @f_name = "#{d}#{File::SEPARATOR}native_ruby_cnsts.txt"
      end
      if File.exists?(@f_name)
        @a_ruby = File.read(@f_name).split(/[\r\n\f]+/)
        @a_ruby.each { |k| hash[k] = nil }
        @ret = true
      else
        UI.messagebox("File #{@f_name} does not exist\n\nExiting!")
      end
    else
      UI.messagebox("Directory #{d} does not exist\n\nExiting!")
    end
    @ret
  end

end
